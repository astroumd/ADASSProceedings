#! /usr/bin/env python3
#
# take a self-contained ADASS paper and output the embeddable version for the book
#          PID.tex -> PID_inc.tex
# it also write the toc file,
#          PID.toc
# which gets catenated for the final authors/toc.txt
#
# In debug mode adds \ssindex{ZZZ-PID!P12-2 Author|textbf}
# except we don't have a way to turn off debug mode
#
# This code should make use of AdassChecks.py for parsing
#
# Sigh, authors are 4 times in the tex file
#   \markboth{A}{...}
#   \author{a~A, b~B}
#   \paperauthor{a~A}....
#   %\aindex{A,~a.}
# but none in the format "P.~Teuben" that we need for the toc.
#
# 
#

import sys

version = "15-jan-2020"
debug = False
#debug = True                              # %%DEBUG comment this line for final version, or read from a dot file

def read1(filename):
    """ read tex file into lines for processing
    """
    f = open(filename)
    lines = f.readlines()
    f.close()
    return lines

triggers = []
triggers.append([False,"%\\aindex",           0])
triggers.append([False,"%\\ssindex",          0])
triggers.append([False,"%\\ooindex",          0])
triggers.append([True,"\\documentclass",      0])
triggers.append([True,"\\usepackage",         0])
triggers.append([True,"\\aspSuppressVolSlug", 0])
triggers.append([True,"\\begin{document}",    0])
triggers.append([True,"\\end{document}",      0])
triggers.append([None,"\\title{",             0])
triggers.append([None,"%toc",                 0])
#triggers.append([True,"\\bibliography",      0])

def carg(line):
    # \title{..}       (could be 2 lines, but those now need %toc)
    # \aindex{...}
    # %toc ...         (needs to be 1 line)
    if line.find('%toc') == 0:
        return line[5:]
    pco = line.find('{')
    pcc = line.rfind('}')
    if line[len(line)-1] == '\\':                 # two line \title, due to forced orphan?, will need a %toc directive
        return line[pco+1:]
    if pco<0 or pcc<0:
        return "BAD ONE LINER, use %toc"
    return line[pco+1:pcc]

def carg2(line):
    # old one
    pco = line.find('{')
    pcc = line.rfind('}')
    if pco<0 or pcc<0:
        return "BAD ONE LINER, use %toc"
    return line[pco+1:pcc]
    
if len(sys.argv) == 1:
    print("Usage: %s name.tex" % sys.argv[0])
    print("  Also writes name.toc one-liner for the TOC")
    print("  version: %s" % version)
    sys.exit(0)

paper = sys.argv[1]
lines = read1(paper)


dot = paper.rfind('.tex')
if dot < 0:
    print("need a .tex file")
    sys.exit(1)

pid     = paper[0:dot]
tocfile = paper.replace('.tex','.toc')
incfile = pid + "_inc.tex"
#print("%% PID: %s TOC: %s  INC: %s" % (pid,tocfile,incfile))

print("%% DO NOT EDIT THIS FILE, generated by TEX2INC version %s" % version)

authors = []
title   = 'TITLE'

for l in lines:
    triggered = False
    for t in triggers:
        if l.find(t[1]) == 0:                 # if there is a trigger on the line
            t[2] = t[2] + 1
            if t[0] == None:                                 # special, but leave alone
                # only for \title or  %toc for now
                if t[2] == 1:
                    title = carg(l).strip()
                print(l.strip())
            elif t[0]:                                       # comment it
                print("%%TEX2INC %s" % l.strip())
            else:                                            # uncomment it
                if t[1] == "%\\aindex":
                    if t[2] == 1:
                        # in debug mode, add the filename to the ssindex
                        if debug:
                            print("\\ssindex{ZZZDEBUG!%s}" % paper)
                        # for 1st aindex add "|textbf" before the }
                        tmp1 = "%s" % l[1:].strip()   
                        cl1 = tmp1.rfind('}')
                        tmp2 = tmp1[:cl1] + '|textbf}'
                        print("%s" % tmp2)
                    else:
                        print("%s" % l[1:].strip())
                    a1 = carg(l)
                    # check if (foreign alphabet) author has the @ alphabetizing trick
                    # e.g. \aindex{garzon@Garz\'{o}n,~F.} is the corrected version of \aindex{Garz\'{o}n,~F.} to get author index alphabetized
                    ati = a1.find('@')
                    a1 = a1[ati+1:]
                    if a1.find('textit') < 0:      # 'textit' is reserved for photo captions so we can skip in TOC author list
                        authors.append(a1)
                elif t[1] == "%\\ooindex":
                    l=l.replace(',','!')           # ASCL index gets an extra indentation
                    print("%s" % l[1:].strip())                    
                else:
                    print("%s" % l[1:].strip())
            triggered = True
            continue
    if not triggered:
        print(l.strip())
    # now find the \title{TITLE}
    # now find the author list from one of those 3 options....

# summary
nbad = 0
missing = []
for t in triggers:
    if t[2]==0:
        nbad = nbad + 1
        missing.append(t[1])
    print("%%TEX2INC %d %s" % (t[2],t[1]))
if nbad > 0:
    print("%% Warning, missing items: %s" % str(missing))
else:
    print("%% tex2inc OK")

# @todo    this needs to be properly done, all authors
def flip(author):
    """    Last, F   ->   F~Last
    """
    lc = author.find(',')
    if lc < 0:
        print("%% BAD author malformed: %s" % author)
        return author
    tmp = author[lc+1:]
    if len(tmp) > 0:
        if tmp[0] == '~':
            tmp = tmp[1:]
        return tmp + '~' + author[:lc]
    else:
        print("%% ERROR: %s has no first initial???" % author)
        return author[:lc]

invited = ''

ia = 0
na = len(authors)
for a in authors:
    ia = ia + 1
    if ia == 1:
        author = flip(a)
    elif na == 2:
        author = author + ' and ' + flip(a)
    elif ia == na:
        author = author + ', and ' + flip(a)
    else:
        author = author + ', ' + flip(a)


if pid[0] == 'I':  invited = '(Invited Speaker)'

f = open(tocfile,"w")
if title[len(title)-1] == '\\':
    # should never occur anymore
    title2 = 'TBD'
    f.write("\\tocinsertentry[r]{%s%s}{%s %s}{authors/%s_inc}\n" % (title,title2,author,invited,pid))
else:
    f.write("\\tocinsertentry[r]{%s}{%s %s}{authors/%s_inc}\n" % (title,author,invited,pid))
f.close()
